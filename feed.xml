<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Julien Delange</title>
    <description>Harder, Better, Faster, Stronger</description>
    <link>http://julien.gunnm.org/</link>
    <atom:link href="http://julien.gunnm.org/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Sun, 15 Dec 2019 20:45:59 -0800</pubDate>
    <lastBuildDate>Sun, 15 Dec 2019 20:45:59 -0800</lastBuildDate>
    <generator>Jekyll v4.0.0</generator>
    
      <item>
        <title>Google is the new Microsoft</title>
        <description>&lt;p&gt;Google is the new Microsoft. What does that mean?&lt;/p&gt;

&lt;h2 id=&quot;some-history&quot;&gt;Some History&lt;/h2&gt;
&lt;p&gt;Let’s start by explaining what was Microsoft twenty years ago.&lt;/p&gt;

&lt;p&gt;Microsoft, is the company (or at least, his CEO) that once categorized
&lt;a href=&quot;https://www.theregister.co.uk/2001/06/02/ballmer_linux_is_a_cancer/&quot;&gt;Linux as cancer&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This is the company that did not respect technologies standards (especially
HTML/CSS) to put away competition, which resulted in a horrible developer
and user experience. Internet Explorer 6 was considered &lt;a href=&quot;https://en.wikipedia.org/wiki/Internet_Explorer_6#Criticism&quot;&gt;one of the worst
product of all time&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This is also the company that developed a collaborative scheduling Operating
System (all Windows before XP) when superior solutions already existed at the time.&lt;/p&gt;

&lt;p&gt;And worst, this is the company that integrated such pictures in a text editor.&lt;/p&gt;

&lt;p style=&quot;text-align: center;&quot;&gt;&lt;img src=&quot;/assets/clippy.gif&quot; alt=&quot;Working From Home&quot; width=&quot;20%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This was the company with a crazy CEO (in the bad sense) &lt;a href=&quot;https://www.techradar.com/uk/news/phone-and-communications/mobile-phones/portable-devices/mp3-players/computing/apple/ballmer-apple-iphone-will-be-massive-flop-154018&quot;&gt;that predicted in 2007
the iPhone will be a flop&lt;/a&gt; and acquired Nokia (a company that was completely done and no future) after 2010.&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/Vhh_GeBPOhs&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;Since then, the company is doing better, thanks to a new CEO that brought
the company back on track.&lt;/p&gt;

&lt;p&gt;But ten to twenty years ago, Microsoft was lost. They did not have good products,
no identity and no soul. And this is where Google is today.&lt;/p&gt;

&lt;h2 id=&quot;product-hell&quot;&gt;Product hell&lt;/h2&gt;

&lt;p&gt;The first Google products were great. I remember when GMail was offering
a GB to store my emails where Hotmail was offering 100 MB at most. The interface
was fast, convenient: everything you expected for such a product. They were
following key engineering principles: keep it simple and stupid.&lt;/p&gt;

&lt;p&gt;Over the years, products started to be bloated. And slow. GMail started to
look like Outlook or even Lotus Notes, especially on non-Chrome browsers.
Products started to be counter-intuitive, exactly how
Microsoft Word currently is. Google Cloud Console is the perfect example of a terrible
user experience where nothing is intuitive and you need to go to the
documentation &lt;strong&gt;each time&lt;/strong&gt; you use the product. There is a clear lack
of prioritization at the company where new features are stacked and developed
in spite of common design sense.&lt;/p&gt;

&lt;p&gt;There is also a clear lack of innovation. Over the last years, Google failed
to create new innovative products. Every attempt to start a social network
failed miserably and new products are being thrown into
the &lt;a href=&quot;https://gcemetery.co/&quot;&gt;Google cemetery&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;no-morale&quot;&gt;No morale&lt;/h2&gt;

&lt;p&gt;Inside the company, it seems there is no morale. The perfect example is
when the company did not immediately react to a sexual harassment case
and &lt;a href=&quot;https://www.cnet.com/news/google-reportedly-paid-andy-rubin-90m-despite-charge-of-sexual-misconduct/&quot;&gt;kept giving a $90M bonus package to the alleged culprit&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The same low morale also applies to the products. Google that once praised
standardization is now behaving exactly like Microsoft, when they had
a monopoly in the browser market. It is now not a mystery that Google is
changing its web
applications to &lt;a href=&quot;https://gadgets.ndtv.com/apps/news/youtube-speed-faster-google-chrome-mozilla-firefox-microsoft-edge-1889651&quot;&gt;slow down competitors such as Firefox or Edge&lt;/a&gt;.
Exactly what Microsoft did with Internet Explorer 6 fifteen years ago.&lt;/p&gt;

&lt;p&gt;These repeated practices show that instead of innovating, Google is trying to
make the competitors look bad.&lt;/p&gt;

&lt;p&gt;Do you want to be their customers?&lt;/p&gt;

&lt;h2 id=&quot;do-not-be-evil&quot;&gt;Do not be evil&lt;/h2&gt;
&lt;p&gt;The story of Google is simple: the new cool kids were here to revolutionize
the internet. At the very beginning, Google was a game changer: a search
on the internet was taking less than a second. Their product were cool. And free.
They were the Microsoft anti-thesis.&lt;/p&gt;

&lt;p&gt;The spirit of the company was simple: be cool. Or rather: &lt;em&gt;Don’t be evil&lt;/em&gt;.
To developers, it meant a lot. It meant that somebody was doing the &lt;em&gt;right&lt;/em&gt; thing
and was not going to sell their soul.&lt;/p&gt;

&lt;p&gt;Unfortunately, this time is now gone, as the previous paragraphs shown.
It was officially &lt;a href=&quot;https://gizmodo.com/google-removes-nearly-all-mentions-of-dont-be-evil-from-1826153393&quot;&gt;reflected in the company internal documents in 2018&lt;/a&gt;.
And it is now &lt;em&gt;okay&lt;/em&gt; for Google to be evil.&lt;/p&gt;

&lt;p&gt;Make no mistake: Google is the new Microsoft.&lt;/p&gt;
</description>
        <pubDate>Sun, 15 Dec 2019 05:13:20 -0800</pubDate>
        <link>http://julien.gunnm.org/microsoft/evil/google/2019/12/15/google-is-the-new-microsoft/</link>
        <guid isPermaLink="true">http://julien.gunnm.org/microsoft/evil/google/2019/12/15/google-is-the-new-microsoft/</guid>
        
        <category>google</category>
        
        <category>new microsoft</category>
        
        
        <category>microsoft</category>
        
        <category>evil</category>
        
        <category>google</category>
        
      </item>
    
      <item>
        <title>Java or Scala, that is the question</title>
        <description>&lt;p&gt;Over the last two years, I had the opportunity to gain knowledge on Scala
and also re-learn Java (after about 3 years without using it). I built network
analysis tools in Scala and used it to entirely write the backend of
&lt;a href=&quot;https://www.code-inspector.com&quot;&gt;Code Inspector&lt;/a&gt; with it. In the meantime, when
starting to recently form a new engineering team, I had to use (and re-learn) Java again. I wanted
to reflect on this experience to share some thoughts as to where these languages
stand, the directions they are taking and answer the
question too-often asked: which one to use?&lt;/p&gt;

&lt;h1 id=&quot;java-has-evolved-a-lot-and-for-the-better&quot;&gt;Java has evolved a lot, and for the better&lt;/h1&gt;

&lt;p&gt;Java evolved a lot over its about 20 years of existence. From a simple object-oriented language, it
brought fundamental changes. One example is the change in the for-loop syntax
in Java 5 or the introduction of lambda in Java 8. As the language became very
popular, developers added a ton of libraries for it and the language became very
popular with infamous application (such as &lt;a href=&quot;https://hadoop.apache.org/&quot;&gt;Hadoop&lt;/a&gt;,
&lt;a href=&quot;https://spring.io/&quot;&gt;Spring&lt;/a&gt; or &lt;a href=&quot;https://www.playframework.com/&quot;&gt;Play&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Also, the community around the language built libraries to overcome some
of its limitations. One good example is &lt;a href=&quot;https://github.com/google/guava&quot;&gt;Guava&lt;/a&gt;,
the library developed by Google that provides a lot of helper methods
and class to overcome some clear limitations of the language (e.g. the
lack of support of &lt;code class=&quot;highlighter-rouge&quot;&gt;Optional&lt;/code&gt; - more on this later).&lt;/p&gt;

&lt;h1 id=&quot;functional-programming-has-proven-to-be-clean-and-effective&quot;&gt;Functional Programming has proven to be clean and effective&lt;/h1&gt;

&lt;p&gt;In the meantime, it is becoming clear that Object-Oriented programming (OO)
is not the silver bullet we thought it will be. Many people believed it was
a revolution in the programming world (e.g. Steve Jobs at
  was pitching the use of &lt;a href=&quot;https://computerhistory.org/blog/the-deep-history-of-your-apps-steve-jobs-nextstep-and-early-object-oriented-programming/&amp;gt;`_&quot;&gt;OO for NeXT&lt;/a&gt; long time ago, seeing it as revolutionary).
I belong to the group of engineers that were taught OO was the right way to build
programs (and even learned &lt;a href=&quot;https://en.wikipedia.org/wiki/Merise&quot;&gt;Merise&lt;/a&gt; or &lt;a href=&quot;https://en.wikipedia.org/wiki/Unified_Modeling_Language&quot;&gt;UML&lt;/a&gt;).
It is then no surprise that at first, I was very skeptical about the benefits of FP, especially after having used Java and
C++ for the last 5+ years. My interest in FP really started to increase after watching
this video of &lt;a href=&quot;https://en.wikipedia.org/wiki/John_Carmack&quot;&gt;John Carmack&lt;/a&gt; on the topic
where he explains the real issues our industry is facing and how FP is helping to write
simpler programs.&lt;/p&gt;

&lt;center&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/1PhArSujR_A&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/center&gt;

&lt;p&gt;After few months, it became obvious that Functional Programming (FP) helps to write programs
that are easier to maintain and reason about it. The use of immutability avoids
side-effects and basic errors such as &lt;code class=&quot;highlighter-rouge&quot;&gt;NullPointerException&lt;/code&gt; that
have been plaguing programs for decades. As human, we fail to reason about
programs structure and do not build systems with the idea that people will
 maintain it for the years to come. And these problems increase as the size
 of the programs (and the number of engineers working on it) increases.
We can argue that these problems can be solved
using more processes and tools (static analyzer, automated checks during reviews, etc.),
but at the end of the day, what matters is to write something
simple from the start to avoid problems and additional work later in the development
process. The key idea is to keep thing simple from the start.
FP forces you to separate concerns (data vs. functions) and write
understandable code using &lt;a href=&quot;https://en.wikipedia.org/wiki/Pure_function&quot;&gt;pure functions&lt;/a&gt; where outputs only depends on the inputs.&lt;/p&gt;

&lt;p&gt;From a mental model and design perspective, the clear separation between
data (&lt;code class=&quot;highlighter-rouge&quot;&gt;case class&lt;/code&gt; in Scala) and the functions that process it helps you to
reasons about your data flow. Finally, the use of pure functions facilitates
testing and is probably the biggest take-away from FP.&lt;/p&gt;

&lt;p&gt;There are many reasons that make FP superior to OO and so far, I believe that
the best summary has been written by Joe Amstrong, creator
of Erlang, who summarizes most of them in a &lt;a href=&quot;http://www.cs.otago.ac.nz/staffpriv/ok/Joe-Hates-OO.htm&quot;&gt;great essay&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;OO was probably a good intention but &lt;a href=&quot;https://nickfoy.com/blog/2018/4/7/good-intentions-dont-work&quot;&gt;good intentions don’t work&lt;/a&gt; (probably the best thing I learned from my time at Amazon).&lt;/p&gt;

&lt;h1 id=&quot;java-evolves-in-the-direction-of-scala&quot;&gt;Java evolves in the direction of Scala&lt;/h1&gt;

&lt;p&gt;It is now clear that Java is now taking the direction of Scala since several years
One of the obvious sign is the introduction of lambda in Java 8, a first-class
citizen concept of the Scala language.&lt;/p&gt;

&lt;p&gt;Another example is the push from the community to support Scala-like constructions
such as the &lt;code class=&quot;highlighter-rouge&quot;&gt;Optional&lt;/code&gt; in &lt;a href=&quot;https://github.com/google/guava&quot;&gt;guava&lt;/a&gt;
(or even the helper methods to improve the default implementation of &lt;code class=&quot;highlighter-rouge&quot;&gt;toString&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;equals&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;hashCode&lt;/code&gt; - there are plenty of examples).&lt;/p&gt;

&lt;p&gt;The last example in date is the project [Amber from Java|https://openjdk.java.net/projects/amber/)
that is copying core Scala features such as [pattern matching|https://openjdk.java.net/jeps/305], &lt;code class=&quot;highlighter-rouge&quot;&gt;case class&lt;/code&gt;
(renamed &lt;a href=&quot;https://cr.openjdk.java.net/~briangoetz/amber/datum.html&quot;&gt;data classes&lt;/a&gt;) or &lt;a href=&quot;https://openjdk.java.net/jeps/286&quot;&gt;type inference&lt;/a&gt;.
Once project Amber is done, you could write code like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;if (obj instanceof String s || s.length() &amp;gt; 5) {s.contains(&quot;foo&quot;)}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The exact same functionality exists in Scala since its inception and the same
code would look like&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;obj match {
  case s: String if s.length() &amp;gt; 5 =&amp;gt; s.contains(&quot;foo&quot;)
  case _ =&amp;gt; false
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Is that a bad thing that Java is copying Scala? In fact, this is really healthy.
And definitively shows the value of the concepts behind the language.
However, as these features are added on top of a already complex language, it brings
a new set of problems.&lt;/p&gt;

&lt;h1 id=&quot;you-cannot-get-rid-of-the-past&quot;&gt;You cannot get rid of the past&lt;/h1&gt;

&lt;p&gt;The biggest issue by introducing this new FP-compliant features on top of an old language is
the new level of complexity and the related ambiguity it might bring.
As the language needs to stay backward-compatible
with the existing feature, the new one are added without deprecating the old one,
which let programmers do whatever they wants since no rule will be enforced
by the compiler. This brings consistency issues in the codebase (use of multiple
coding patterns in the language), which confuses developers and make program
maintenance even more complex. One good example of such problem is large C++
codebase that tried to evolve to later versions (for example, when mixing
raw and smart pointers in C++).&lt;/p&gt;

&lt;p&gt;These additional features do not address the main shortcoming of the
language (OO, mutable variables, separation of concerns, etc.) and do not force the developer to use
FP. It offers the possibility to use it but does not mandate it, which means
that using FP must be enforced through a human process that is fallible by
definition. Not good.&lt;/p&gt;

&lt;h1 id=&quot;so-what-language-to-choose&quot;&gt;So what language to choose?&lt;/h1&gt;

&lt;p&gt;It is now clear that FP languages are superior in terms of maintenance, which
is the biggest cost in software today.&lt;/p&gt;

&lt;p&gt;One argument that is often made against Scala is the lack of candidates
that know Scala. That might be true if you are looking for a temporary position
but otherwise, if you hire a developer because of its familiarity
with a particular language, this is not good for the long term. It is better
to focus on the fundamentals (data structure, algorithms, etc.) than on
a particular technology. Learning Scala does not take much time. My experience after one year
  of teaching Scala showed me that engineers understands the fundamentals within a month).&lt;/p&gt;

&lt;p&gt;If you are starting a new project from scratch, Scala is a good choice and its
compatibility with Java lets you use any existing Java library
(and there are tons of it). That should
open the best of both worlds by having a great language a a ton of existing
and reliable libraries.&lt;/p&gt;

&lt;p&gt;But what if you already have an existing codebase, should you dump Java and start to rewrite everything in Scala? Probably not. Or at least,
not that fast. This would be a non-sense to dump a large codebase built, matured
and stabilized for years to only switch to a new language. And it would
also be an immediate, visible loss of productivity as all engineers are starting
to learn Scala. The best way forward is to start using new features of the language for the
existing code, and put processes (such as automatic checks) in place
to make sure the codebase stays consistent. If you start re-writing some
services or decompose them, it can be a good idea to start using Scala
(and its compatibility with Java helps in that direction) and let few engineers
explore and experiment the language (reducing the potential loss of productivity).
You can then judge for yourself how comfortable your engineers are with this
transition but also evaluates the potential benefits gradually.&lt;/p&gt;

&lt;h1 id=&quot;final-words&quot;&gt;Final Words&lt;/h1&gt;

&lt;p&gt;While this small article is in favor of Scala, the most important idea is
that Functional Programming principles help you writing re-usable and
maintainable code and that Object-Oriented principles were probably a mistake
the industry followed blindly. FP rules and principles can be implemented by
developers in almost any language (see Carmack talk mentioned above) And they
help you write better programs.&lt;/p&gt;
</description>
        <pubDate>Wed, 23 Oct 2019 06:13:20 -0700</pubDate>
        <link>http://julien.gunnm.org/development/agile/2019/10/23/java-vs-scala/</link>
        <guid isPermaLink="true">http://julien.gunnm.org/development/agile/2019/10/23/java-vs-scala/</guid>
        
        <category>java</category>
        
        <category>scala</category>
        
        
        <category>development</category>
        
        <category>agile</category>
        
      </item>
    
      <item>
        <title>Effective code review</title>
        <description>&lt;p&gt;I recently wrote some thoughts for improving code reviews within my team.
It started like a 5 minutes brain-dump at 6:30 in the morning on my way to work and I ended up iterating and refining the list
several times over a few days. This gave me the opportunity to reflect on the differences between the code
review processes among
the various places that I worked at. Also, I strongly believe the environment (academic, industry) matters a lot.
I wanted to share these thoughts as code review can be the
cause of many tensions within a development team.&lt;/p&gt;

&lt;p&gt;There are three types of rules: general ones that apply to both the submitter/reviewer,
submitter rules and reviewer rules.&lt;/p&gt;

&lt;p&gt;These guidelines are not perfect, take them as they are: an attempt to formalize what I believe
we should shoot for.&lt;/p&gt;

&lt;h2 id=&quot;general-guidelines&quot;&gt;General Guidelines&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Always assume good intentions&lt;/strong&gt;. People are not commenting on your code to harm you. They are trying to help you.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Be thankful for having reviews&lt;/strong&gt;, people are dedicating time to look at your work. No matter
the experience of the submitter and reviewer, there is always a chance it can make you a better programmer or co-worker.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Always try to understand first, and then, be understood&lt;/strong&gt;. This comes from the &lt;a href=&quot;https://en.wikipedia.org/wiki/The_7_Habits_of_Highly_Effective_People&quot;&gt;7 habits&lt;/a&gt; and is especially helpful in that context.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;During a conversation, get the perspective of the other person&lt;/strong&gt;, try to put yourself in his/her shoes. This will often help you understand why a comment is made and help you discuss and resolve it.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;reviewer-guidelines&quot;&gt;Reviewer Guidelines&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Understand there is more than one way to do it - (c) &lt;a href=&quot;https://en.wikipedia.org/wiki/There%27s_more_than_one_way_to_do_it&quot;&gt;Perl&lt;/a&gt; -&lt;/strong&gt;.
The goal of code is to solve problems. A problem might have several solutions that are equally effective.
Acknowledge and accept that somebody might choose to solve a problem differently than you would do.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Specify explicitly if a comment/problem is blocking the code to be shipped&lt;/strong&gt;: some code review
systems allow you to distinguish blocking/non-blocking issues. Try to make use of it
so that the submitter can prioritize changes.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Keep discussion/comments in the review system&lt;/strong&gt;: it also serves other members to learn about
potential issues and not replicate them. Ultimately, if you need to talk in person (sometimes, there is
nothing like a face to face discussion), do it but write the outcome in the review for traceability purposes.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;When you point out a flaw in the code/approach, try to propose an alternative&lt;/strong&gt;: telling somebody that his/her
code is bad is not very useful if there is no indication for fixing the issue. Try to explain why this
is bad and give some ideas how to address the issue. If this is a simple issue (syntax error or coding
style violation), just mention this without spending much time to give details.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;If the review matters to you, do it soon&lt;/strong&gt;, probably within 24 hours and the exact delay is something
a team should discuss. It is better for everybody
to get it done quickly: all ideas are still fresh in the head of the submitter, it does not delay
progress on new features, etc. Do not blame the submitter if some code has been shipped without you reviewing it
if it was for review for several days: the blame is probably to put on you for not reviewing it in a timely manner.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;When discussing or arguing a change&lt;/strong&gt; try to relate to coding guidelines, best practices or business goals.
There is no point requesting a change if you &lt;em&gt;“just prefer this style”&lt;/em&gt;: you should have a valid, objective reason
to request that.
For example, I personally almost always consider readability and maintainability as one of the most important aspects of code (software
maintenance and developer time is more expensive than computing resources). But
sometimes, good readability must be impacted to favor performance: in some businesses I have been, winning few nanoseconds
on a code path matters more than having clean and readable code.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;submitter-guidelines&quot;&gt;Submitter Guidelines&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Link your change your issue tracker (Jira, github, etc.)&lt;/strong&gt; and follow the rule that 1 code change belongs to one ticket (one ticket
can have multiple code changes). It improves traceability with user stories and facilitates progress tracking
on a particular task. Design decisions, issues, etc. should be discussed in the ticket, not in the review itself.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Make short reviews&lt;/strong&gt; and try to keep one code change per problem and per component. 
First, it avoids long code review that will take days
to complete and will ultimately cause merge problems (need to re-base on master, etc.). Second, reviewers are less
likely to complete a long code review in a short period of time, which ultimately, will slow you down.
Prefer several, incremental reviews to a larger reviews on dozens of files.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;If there are some temporary code that will be changed later&lt;/strong&gt;: put a comment in the code with your login that explains
why this is delayed and when this should be addressed. Having a random &lt;code class=&quot;highlighter-rouge&quot;&gt;FIXME&lt;/code&gt; without reason is not acceptable, having
temporary incomplete code is OK as long as we have a reason for it and a plan to address it in the future.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Address comments in the review&lt;/strong&gt;: people invest time doing review, respects the work they put in your review
and answer their comments.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;If you are doing pair programming, the ship from your pair does not count&lt;/strong&gt;: code review is there to expose the code
to other opinions and people in your team. Code developed in pair lacks this external point of view. Having the pair
shipping the code is like if the code was being shipped by its author. It defeats the purpose of code review.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Specify how you tested the components in your review&lt;/strong&gt;: some review system allow you to specify how you tested
the software. Copy/paste the command you used to run the test. If you deploy to a testing environment, put the
commend you used. It has two purposes: show the level of testing you did and, ensure that the software still
deploys and run (at least in the testing environment).&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;If one comment upsets you, come back to it later&lt;/strong&gt;: one particular comment might irritate you and after reading
it, you may want to reply in a sarcastic way or to just ignore it. Do not do any of these things. Take some time,
try to have the perspective of the reviewer, and then, reply. Stick to the point. Try to understand why the reviewer
raised that issue and show your good faith about solving this issue.&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Sat, 03 Nov 2018 06:13:20 -0700</pubDate>
        <link>http://julien.gunnm.org/development/agile/2018/11/03/effective-code-reviews/</link>
        <guid isPermaLink="true">http://julien.gunnm.org/development/agile/2018/11/03/effective-code-reviews/</guid>
        
        <category>code review</category>
        
        <category>agile</category>
        
        
        <category>development</category>
        
        <category>agile</category>
        
      </item>
    
      <item>
        <title>Kinesis keyboard report</title>
        <description>&lt;p&gt;This post is about the &lt;a href=&quot;https://www.kinesis-ergo.com/&quot;&gt;Kinesis Keyboard&lt;/a&gt;, and more
particularly the &lt;a href=&quot;https://www.kinesis-ergo.com/shop/advantage2/&quot;&gt;Kinesis Advantage&lt;/a&gt; model
that I am using since 4 months now.&lt;/p&gt;

&lt;h1 id=&quot;what-is-a-kinesis-advantage-keyboard&quot;&gt;What is a kinesis advantage keyboard?&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://www.kinesis-ergo.com&quot;&gt;Kinesis&lt;/a&gt; is a company based in Seattle that manufactures 
ergonomic keyboards (and other devices).
The Advantage is an ergonomic keyboard that should help anybody with some sort of pain
in the joints (hands, etc). They keyboard looks very futurist, very cool, there is a picture
of my actual keyboard at work (with a Twitter key!).&lt;/p&gt;

&lt;p style=&quot;text-align: center;&quot;&gt;&lt;img src=&quot;/assets/kinesis.jpg&quot; alt=&quot;Kinesis keyboard&quot; width=&quot;50%&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;why-getting-one&quot;&gt;Why getting one?&lt;/h1&gt;
&lt;p&gt;The main reason is to be more comfortable while typing on your keyboard and avoid
injuries (hand, wrist). You might
increase your typing speed but that is definitively not the primary reason I
wanted to get one.&lt;/p&gt;

&lt;p&gt;When using a kinesis, you literally don’t need to move your hand to type &lt;em&gt;anything&lt;/em&gt;.
Your hands rest on the palm support and you just move your fingers, nothing else.&lt;/p&gt;

&lt;p&gt;Many people reported improvements and I do too. I had pain regularly in my wrist and 
always thought it was due to aging and there was nothing to do to improve this. The pain
was not strong or acute enough to see a doctor but it bothered me enough to sporadically
stop typing for few hours every few days.&lt;/p&gt;

&lt;p&gt;There are many other reasons to get a kinesis (programmable keys for example), but these functions
are also available in other keyboards too. The real killer feature of the kinesis (at least for me) is how
comfortable it is.&lt;/p&gt;

&lt;h1 id=&quot;is-it-worth-it&quot;&gt;Is it worth it?&lt;/h1&gt;

&lt;p&gt;If you are typing on a keyboard several hours a day, this is probably worth it. If your job
(and then, primary source of income) depends on being able to type on a keyboard, you might
consider buying one.&lt;/p&gt;

&lt;p&gt;It is difficult to know if this is a good idea to get one if you do not
experience any pain - after all, I am not a doctor. I decided to try because I had issues 
and the keyboard fixed them but
there is no clue if my issues was related to my previous hardware. All I know is that I no
longer have pain when using a kinesis.&lt;/p&gt;

&lt;p&gt;The kinesis is expensive (more than $300) but 
I strongly believe that many developers invest too much on hardware and not enough on their development environment
(desk, mouse, keyboard, etc.). At that price, I consider this is a good investment
(it keeps the pain away so that I can code as much as I want).&lt;/p&gt;

&lt;h1 id=&quot;advices-on-getting-started&quot;&gt;Advices on getting started&lt;/h1&gt;

&lt;p&gt;It is really difficult to get started. And this is very frustrating to learn again how to type on keyboard.
In the beginning, you type as if you are wearing ski gloves.&lt;/p&gt;

&lt;p&gt;The keyboard will also keep your brain busy (&lt;em&gt;“what key I am typing?”&lt;/em&gt;), which
can be mentally exhausting. To start, type
things that do not require your brain to work: answer to some basic e-mail, write reports, etc.&lt;/p&gt;

&lt;p&gt;Also, alternate the regular keyboard and the kinesis: your brain need to assimilate the new keymap
and so, giving a break is a good idea too. When I started, I was using the kinesis all anything
that did not require any thinking and switch to the regular keyboard when I needed to think
of what I was typing (such as programming).&lt;/p&gt;

&lt;p&gt;It will take at least two weeks to start typing correctly and one month to be efficient.
After two months, you should be back at your normal speed or even faster. And
you will then never go back on another keyboard!&lt;/p&gt;

</description>
        <pubDate>Tue, 12 Jun 2018 06:13:20 -0700</pubDate>
        <link>http://julien.gunnm.org/keyboard/geek/2018/06/12/kinesis-keyboard/</link>
        <guid isPermaLink="true">http://julien.gunnm.org/keyboard/geek/2018/06/12/kinesis-keyboard/</guid>
        
        <category>keyboard</category>
        
        
        <category>keyboard</category>
        
        <category>geek</category>
        
      </item>
    
      <item>
        <title>Learning Scala in 2018</title>
        <description>&lt;p&gt;Four months ago, I had to learn &lt;a href=&quot;http://www.scala-lang.org&quot;&gt;Scala&lt;/a&gt;
and be familiar with the language in order to contribute to a large Scala codebase.
I was familiar with Java (I spent 4+ years maintaining &lt;a href=&quot;http://www.osate.org&quot;&gt;OSATE&lt;/a&gt; while working
at Carnegie Mellon) and I thought that it would be somehow easy, quick and painless.&lt;/p&gt;

&lt;p&gt;I was dead wrong.&lt;/p&gt;

&lt;p&gt;Yes, Scala runs on top of the JVM but it does not mean it shares so much with Java. Scala is a functional programming language and is way more
complicated than Java. This is another level of complexity. 
I started to contribute to a codebase
with people writing Scala for 4+ years and use the nice and barely documented features for advanced
users. With such a complicated language, the learning curve was very steep and I had to go through it
very quickly to be able to produce anything meaningful.&lt;/p&gt;

&lt;p&gt;That &lt;em&gt;was&lt;/em&gt; hard. But not painful.&lt;/p&gt;

&lt;p&gt;I love learning and I had a ton of fun learning a new language.&lt;/p&gt;

&lt;p&gt;After three months, I am still learning every day and continue to read about advanced features
of the language. But I am now somewhat familiar enough with the basics concepts of Scala that I can be
an active contributor in different projects and teach the language fundamentals at my work.&lt;/p&gt;

&lt;p&gt;I wanted to share the current state of the resources to learn Scala in 2018. After 14 years
of existence, a lot of materials have been produced and I wanted to share what has been 
working for me.&lt;/p&gt;

&lt;h1 id=&quot;the-good&quot;&gt;The Good&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;http://horstmann.com/scala/index.html&quot;&gt;Scala The Impatient&lt;/a&gt; is a good resource but way too light. It covers only some very basic concepts and you do not see some advanced features that are really interesting. Read it but do not stop there.&lt;/li&gt;
  &lt;li&gt;The blog post series of &lt;a href=&quot;https://danielwestheide.com/&quot;&gt;Daniel Westheide&lt;/a&gt;: &lt;a href=&quot;https://danielwestheide.com/scala/neophytes.html&quot;&gt;The Neophyte’s Guide to Scala&lt;/a&gt;. A &lt;strong&gt;must-read&lt;/strong&gt; if you are new to Scala. The examples are great, with many details.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.amazon.com/Programming-Scala-Updated-2-12/dp/0981531687/ref=sr_1_1?ie=UTF8&amp;amp;qid=1528782250&amp;amp;sr=8-1&amp;amp;keywords=odersky+scala&quot;&gt;Programming in Scala&lt;/a&gt; by Martin Odersky: great resource to go deeper about the internals of the language
(how containers work, etc.)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://twitter.github.io/util/&quot;&gt;Twitter util&lt;/a&gt; all the code developed by Twitter, an early adopter of Scala&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://scalacookbook.com/&quot;&gt;The Scala Cookbook&lt;/a&gt; by Alvin Alexander.&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;the-bad&quot;&gt;The Bad&lt;/h1&gt;

&lt;p&gt;The classes on Coursera are unfortunately not that great.
There is a specialization dedicated to Scala and I completed two of the classes in that specialization.
I was very disappointed by the content, especially because I love Coursera (and completed 
great classes on the platform).
Some of the assignments do not match the class, the content is often too confusing.
This specialization is not free (you need to pay a $50 montly membership), which would be &lt;em&gt;ok&lt;/em&gt; 
if the content was good. Unfortunately, this is not that great and I would recommend to stick
with other resources (like the blog posts from &lt;a href=&quot;https://danielwestheide.com/scala/neophytes.html&quot;&gt;Westheide&lt;/a&gt;).&lt;/p&gt;

&lt;h1 id=&quot;focus-on-the-functional-programming-concepts&quot;&gt;Focus on the Functional Programming concepts&lt;/h1&gt;
&lt;p&gt;One of the best advice I could give is to focus on the principles of functional programming. Do not focus
too much on the syntax and other details (such as &lt;code class=&quot;highlighter-rouge&quot;&gt;case class&lt;/code&gt;). Just learn and practice functional 
programming concepts such as:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Monad&lt;/strong&gt;: this is just a container but a fundamental concept for functional programming. &lt;a href=&quot;https://medium.com/@sinisalouc/demystifying-the-monad-in-scala-cc716bb6f534&quot;&gt;Good article that explains the Monad&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;All &lt;strong&gt;transformations functions&lt;/strong&gt;: &lt;code class=&quot;highlighter-rouge&quot;&gt;map&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;flatMap&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;filter&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;drop&lt;/code&gt;. Know them. Practice them. RTFM the &lt;a href=&quot;https://www.scala-lang.org/api&quot;&gt;Scala API&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;What is &lt;strong&gt;&lt;a href=&quot;https://www.quora.com/What-is-tail-recursion-1&quot;&gt;tail recursion&lt;/a&gt;&lt;/strong&gt; and understand why recursing other a list with 10,000 elements will not &lt;a href=&quot;https://en.wikipedia.org/wiki/Stack_Overflow&quot;&gt;blow up your stack&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;use-a-good-ide&quot;&gt;Use a good IDE&lt;/h1&gt;

&lt;p&gt;If you cut meat, you do not use the bread knife. Similarly, when you program in Scala, you
do not use vim or emacs. You could but this is just inefficient and a waste of time when
great IDE provide a ton of support for understanding the source code and digging into
the standard library.&lt;/p&gt;

&lt;p&gt;I use &lt;a href=&quot;https://www.jetbrains.com/idea/&quot;&gt;IntelliJ&lt;/a&gt; and I am regularly discovering new capabilities
(and amazed by many features, such as refactoring). There are my two favorite features
in this IDE:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;If you press the &lt;code class=&quot;highlighter-rouge&quot;&gt;shift&lt;/code&gt; key three times very quickly a search dialog appears and you can search for anything inside your project (thanks Adam for the tip!).&lt;/li&gt;
  &lt;li&gt;Just do &lt;code class=&quot;highlighter-rouge&quot;&gt;command+click&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;alt+click&lt;/code&gt; on a variable, reference, type to go to its declaration. Very powerful to browse and explore code.&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;code-repository&quot;&gt;Code Repository&lt;/h1&gt;

&lt;p&gt;I started a repository that contains code samples for Scala beginners.
This is a way to share some code with beginners and help newcomers in the Scala community.
This code is intentionally over-documented and often explains what the code does
step by step.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;You can find the repository at:  &lt;a href=&quot;https://github.com/juli1/scala-cookbook&quot;&gt;https://github.com/juli1/scala-cookbook&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h1 id=&quot;other-interesting-discussionsresources&quot;&gt;Other interesting discussions/resources&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://kubuszok.com/2018/scala-fud-faq-for-newbies/&quot;&gt;Scala FUD FAQ for newbies&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://tpolecat.github.io&quot;&gt;tpolecat blog&lt;/a&gt; - tpolecat is very active in the online communities and have always great resources/information&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;keep-learning&quot;&gt;Keep Learning&lt;/h1&gt;

&lt;p&gt;There is always more to learn! Some ideas to improve your knowledge of Scala:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Follow &lt;a href=&quot;https://twitter.com/scala_lang&quot;&gt;@scala_lang&lt;/a&gt; on Twitter!&lt;/li&gt;
  &lt;li&gt;Subscribe to &lt;a href=&quot;http://scalatimes.com/&quot;&gt;Scala Times&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Follow the Scala topic on &lt;a href=&quot;http://www.quora.com&quot;&gt;Quora&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Tue, 12 Jun 2018 06:13:20 -0700</pubDate>
        <link>http://julien.gunnm.org/scala/programming/2018/06/12/how-to-learn-scala-in-2018/</link>
        <guid isPermaLink="true">http://julien.gunnm.org/scala/programming/2018/06/12/how-to-learn-scala-in-2018/</guid>
        
        <category>scala</category>
        
        <category>intellij</category>
        
        <category>programming</category>
        
        <category>help</category>
        
        
        <category>scala</category>
        
        <category>programming</category>
        
      </item>
    
      <item>
        <title>The symbol of the Falcon Heavy launch</title>
        <description>&lt;p&gt;Until very recently, space exploration was something that did not get much traction.
People stopped dreaming about space and rockets long time ago.&lt;/p&gt;

&lt;p&gt;Until this happened.&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/A0FZIwabctw&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;In less than 10 minutes, a giant rocket took off, its side booster came back on earth and a roadster was in space.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;BOOM&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A lot of things have been said about the rocket itself, about SpaceX founder Elon Musk
and what it means for the future of space exploration and space travel. I do not want to talk about this.&lt;/p&gt;

&lt;p&gt;I want to share some insights about the incidental effect of this launch.
There are the main few thoughts.&lt;/p&gt;

&lt;h1 id=&quot;if-you-want-to-disrupt-do-not-listen-to-the-experts&quot;&gt;If you want to disrupt, do not listen to the experts&lt;/h1&gt;

&lt;p&gt;When I was working at the European Space Agency (&lt;a href=&quot;http://www.esa.int&quot;&gt;ESA&lt;/a&gt;) for about 2 years, people were making fun of SpaceX.
Space experts (engineers, directors - almost everybody at that time)
considered Musk was an idiot with an irrealistic dream of building reusable rockets.&lt;/p&gt;

&lt;p&gt;For years, the company was discredited, saying that the idea of landing rockets
was not feasible.&lt;/p&gt;

&lt;p&gt;Until this happened.&lt;/p&gt;

&lt;p style=&quot;text-align: center;&quot;&gt;&lt;img src=&quot;/assets/rocket-landing.gif&quot; alt=&quot;Landing&quot; width=&quot;50%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;SpaceX made it happen and now, the same experts that made fun of him 
&lt;a href=&quot;https://en.wikipedia.org/wiki/Adeline_(rocket_stage)&quot;&gt;copy him&lt;/a&gt;. It will take them years to catch-up (the first reusable rocket
from ESA is announced to start to be tested in 2020 - SpaceX succeeded in 2015!). The person they called
an idiot years ago disrupt their industry and will make them bankrupt.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Lesson 1&lt;/strong&gt;: dream big, worry small&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Lesson 2&lt;/strong&gt;: do not be overconfident, anybody can attack your business and make you bankrupt tomorrow&lt;/p&gt;

&lt;h1 id=&quot;governments-are-inefficient&quot;&gt;Governments are inefficient&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Ariane_6&quot;&gt;Ariane 6&lt;/a&gt; will take $3.6B euros to develop. The Falcon Heavy development cost was $500M and 
can take embedd more payload than the future Ariane. So, why such a difference?&lt;/p&gt;

&lt;p&gt;There are two main reasons: work inefficiency and lack/fear of innovation.&lt;/p&gt;

&lt;p&gt;Actual rocket developments is done by government agencies. The work is often done
by contractors that are very expensive (you have to pay the contractor agency, which
takes a fee - they act as a middleman). There are also some workers that are not 
competent and still employed and/or people
promoted for political reasons while not being effective and block other, more competent engineers
that are frustrated and leave after few years. At the end of the day, this is a large overhead.
Also, in the case of ESA, there is the &lt;a href=&quot;https://www.esa.int/About_Us/Business_with_ESA/How_to_do/Industrial_policy_and_geographical_distribution&quot;&gt;geographic return policy&lt;/a&gt;:
past projects are not re-used and the tax payer pay the same project twice!&lt;/p&gt;

&lt;p&gt;The second is lack of innovation and fear of disruption. Until SpaceX started
to be seriously in the space business, rocket launchers and satellites were using proprietary processors
paid at outrageous prices. In the case of european space programs,
&lt;a href=&quot;https://www.gaisler.com/&quot;&gt;gaisler research&lt;/a&gt;, a company started by a former ESA employee, 
is the main (only?) hardware provider for onboard computers.
Its electronic components cost dozen of thousands of euros
and each sub-contractor for any space program has to purchases these processors. As there is only one
provider for these processor, there is no competition on the price and the company can set the price
the tax-payer will end up paying! SpaceX took a radically different
direction by using off-the-shelf components make them resilient to radiation using redundant
systems. Instead of feeding companies
that set their own prices, SpaceX designed a system that uses multiple cheap component and coordinate them
to be resilient to failure. There is no doubt that they apply the same principles at different steps of the
supply chain to reduce costs at scale. Simple and efficient.&lt;/p&gt;

&lt;p&gt;The point is: space programs have been run by governmental organizations, which are
inefficient and end up wasting the taxpayer money.
SpaceX gave the proof by reducing drastically 
the cost of a launch ($60M for a &lt;a href=&quot;https://en.wikipedia.org/wiki/Falcon_9&quot;&gt;Falcon9&lt;/a&gt; launch versus $200M for Ariane5) 
and reduce development costs (see above). 
Government presence is necessary in some areas
but they are not designed to run businesses efficiently, this has been shown multiple times
in history (the telecom business in France is a good one too).&lt;/p&gt;

&lt;h1 id=&quot;immigration-is-a-force&quot;&gt;Immigration is a force&lt;/h1&gt;

&lt;p&gt;There is a lot of discussion about immigration in the previous months. I do not want
to have a political discussion there, this is not my objective. My point is that SpaceX is a company 
started by an immigrant and many SpaceX employees are foreigners.&lt;/p&gt;

&lt;p&gt;Immigration bring people that are hungry and want to raise the bar. Look around major US companies today:
one founder of Alphabet is Russian, the CEO of Google is Indian as the CEO of Microsoft!
Foreigners come in a country because they have big dream. They come to realize them
They are a force: their positive energy is the fuel of innovation and success.&lt;/p&gt;

&lt;h1 id=&quot;usa-is-where-dreams-happen&quot;&gt;USA is where dreams happen&lt;/h1&gt;

&lt;p&gt;A success like the Falcon Heavy project would never have happened in Europe: were laughing at Musk
and his ideas of reusable rockets! No government would have funded him outside of the USA. Europe is the culture of the nay-sayer, where
people prefer blaming rather than trying and learning from their failure.&lt;/p&gt;

&lt;p&gt;USA is the country where you have enough freedom to start and experience ideas. This is where
new technologies are created. Where self-driving cars are emerging where energy efficient 
materials are produced. And now, new rockets are taking off. USA is the country where your dreams can become reality.&lt;/p&gt;

&lt;h1 id=&quot;the-future-is-bright-for-the-space-business&quot;&gt;The future is bright for the Space business&lt;/h1&gt;

&lt;p&gt;This launch was a great promotion for Space X, no doubt about this. And now, people are talking again about space exploration
and space travel. SpaceX, &lt;a href=&quot;https://www.blueorigin.com/&quot;&gt;Blue Origin&lt;/a&gt; and new companies will be competing. 
This will open more opportunities in a very near future, not only for space travel but potentially
for establishing colonies on other planets. The dark days are gone for the space business.&lt;/p&gt;

</description>
        <pubDate>Thu, 26 Apr 2018 06:13:20 -0700</pubDate>
        <link>http://julien.gunnm.org/thoughts/spacex/falcon%20heavy/2018/04/26/falcon-heavy-launch/</link>
        <guid isPermaLink="true">http://julien.gunnm.org/thoughts/spacex/falcon%20heavy/2018/04/26/falcon-heavy-launch/</guid>
        
        <category>us</category>
        
        <category>falcon heavy</category>
        
        <category>esa</category>
        
        <category>space</category>
        
        
        <category>thoughts</category>
        
        <category>spacex</category>
        
        <category>falcon heavy</category>
        
      </item>
    
      <item>
        <title>Goodbye Amazon, Hello Twitter</title>
        <description>&lt;p&gt;After more than a year at &lt;a href=&quot;https://aws.amazon.com/&quot;&gt;Amazon Web Services&lt;/a&gt;, I will
be joining &lt;a href=&quot;https://www.twitter.com&quot;&gt;Twitter&lt;/a&gt; and work on their infrastructure.&lt;/p&gt;

&lt;p&gt;My &lt;a href=&quot;https://twitter.com/juli1pb&quot;&gt;twitter account&lt;/a&gt; might be more active!&lt;/p&gt;

&lt;p&gt;I am really thankful and lucky that I have been given the
opportunity to work at AWS. I worked at a scale I would never imagine and
met fantastic people. I hope I will make as big of an impact at
Twitter! The future is exciting!&lt;/p&gt;

&lt;p style=&quot;text-align: center;&quot;&gt;&lt;img src=&quot;/assets/twitter-logo.jpg&quot; alt=&quot;Twitter logo&quot; width=&quot;50%&quot; /&gt;&lt;/p&gt;

</description>
        <pubDate>Sun, 25 Feb 2018 05:13:20 -0800</pubDate>
        <link>http://julien.gunnm.org/job/2018/02/25/goodbye-amazon-hello-twitter/</link>
        <guid isPermaLink="true">http://julien.gunnm.org/job/2018/02/25/goodbye-amazon-hello-twitter/</guid>
        
        <category>job</category>
        
        <category>twitter</category>
        
        
        <category>job</category>
        
      </item>
    
      <item>
        <title>On working remotely</title>
        <description>&lt;p&gt;When I started working at Amazon Web Services, I moved from Pittsburgh, PA to 
Seattle, WA. But six months later, I relocated in San Francisco, CA and continued
to work remotely with my team located in Seattle, WA.&lt;/p&gt;

&lt;p&gt;Working remotely can be challenging. It works for me but not without change.
A &lt;a href=&quot;https://twitter.com/b0rk/status/944620024303702021&quot;&gt;recent tweet&lt;/a&gt;
motivated me to to share this experience and what works/doesn’t work for me
(and might work/don’t work for you - don’t try this at &lt;del&gt;home&lt;/del&gt; work).&lt;/p&gt;

&lt;h1 id=&quot;pro-active-communication-and-documentation&quot;&gt;Pro-active communication and documentation&lt;/h1&gt;
&lt;p&gt;By nature, you no longer have
the regular chat about this new cool project over lunch or in the corridor.
People are not stopping at your desk to just discuss an idea while having coffee.
You are off these discussions and you need to find other ways to be up to date
and informed about what is going on in your team/company.&lt;/p&gt;

&lt;p&gt;This definitively change the way you communicate and document your work and
 you need be proactive. The
informal chat in the corridor is now a wiki page or an e-mail that describes
the idea with references. It not only facilitates
communication between with the team, but increases the quality of the documentation overall.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Take Away&lt;/strong&gt;: document as much as you can (on a wiki, markdown files, etc.) and
make your team/manager aware of what you are working on. 
Avoid to take e-mail as a way to document your work:
people delete e-mails, use wiki (good) or markdown documents on a git repository
(better).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Take Away 2&lt;/strong&gt;: be proactive when communicating with your manager. Send weekly report
to keep him up-to-date so that he knows on what you are working. Do not assume anything,
document explicitly everything.&lt;/p&gt;

&lt;h1 id=&quot;avoid-work-from-home&quot;&gt;Avoid work from home&lt;/h1&gt;
&lt;p&gt;Working from home sounds very appealing but it can in fact be a terrible idea.
When working from home, it is easy to
spend 10 minutes every hour doing something totally unrelated to work. Or to
assume that &lt;em&gt;you can do this chore during the day while working&lt;/em&gt; 
(for example, between two code reviews).&lt;/p&gt;

&lt;p&gt;It just doesn’t work. When doing the chore, you are thinking about work. Or while working, 
you are obsess with the chore and you want to get it done right &lt;strong&gt;now&lt;/strong&gt;. In short:
staying at home does not help to focus.&lt;/p&gt;

&lt;p&gt;You also end up with the feeling you are always at home (and think you do
nothing) or at work (and you keep working all the time). Having a physical separation
between home and work help to allocate time and know your limits.&lt;/p&gt;

&lt;p style=&quot;text-align: center;&quot;&gt;&lt;img src=&quot;/assets/dr-evil-wfh.jpg&quot; alt=&quot;Working From Home&quot; width=&quot;50%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Lastly, work is also a way to socialize (engage with colleagues,
discuss points of view and perspectives). While working remotely, it is
important to keep this aspect, by having a desk in another location, sharing a
co-working space or just going in a working area in a coffee shop!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Take Away&lt;/strong&gt;: separate work from life physically and mentally. Going to an office not only 
helps to focus and also socialize with other people in your company (happy hour anyone?).&lt;/p&gt;

&lt;h1 id=&quot;schedule-your-day-and-stick-to-it&quot;&gt;Schedule your day and stick to it&lt;/h1&gt;
&lt;p&gt;One major benefit of working remotely: no unwanted interruption
from your manager/co-workers (except if they page you, which does not happen
very often). You are more effective because you can focus on something and
nobody will come and interrupt you (downside - as discussed
earlier: less social interaction). Also, people invites you only to important
meeting and you can easily refuse the ones you feel you do not bring value.&lt;/p&gt;

&lt;p&gt;Consequence: you have more time and can focus on whatever you want. Downside:
you can work on the same thing for hours while you need to make progress on
others project too. This happens when being in an office but is amplified when working
remotely.&lt;/p&gt;

&lt;p&gt;To avoid this, the solution is to clearly schedule the day, cut it into time slots
(1 to 2 hours) and allocate a task for each. It helps to stay focus on what you are
going to work through the day and make progress on all the projects you are working on.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Take Away&lt;/strong&gt;: write down your schedule (every day, every week, whatever period
works for you) and stick to it. Review it after a while to see how you can
adapt/be more efficient.&lt;/p&gt;

&lt;h1 id=&quot;keep-an-open-chat-policy&quot;&gt;Keep an open-chat policy&lt;/h1&gt;
&lt;p&gt;Your co-workers and team-members might be reluctant to engage via e-mail and/or
chat. 
After all, it is sometimes easier to come to your desk, ask to go for
coffee and discuss.&lt;/p&gt;

&lt;p&gt;This is important to make it clear to the people you help/mentor that they
can ping/page you anytime. &lt;strong&gt;Anytime&lt;/strong&gt;. Even after &lt;em&gt;“work hours”&lt;/em&gt;. For any 
(work-related) question.&lt;/p&gt;

&lt;p&gt;The rationale is simple: if one team member doesn’t know what to do after receiving a page in the middle
of the night, that is your responsibility to help them and make them feel safe.
It is always better to be interrupted for and make sure the person makes
progress rather than letting them in the unknown and feeling they cannot do
anything. After all, this is your job to mentor people and make them feel safe.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Take Away&lt;/strong&gt; : make it clear than you are available through chat and try to
make people feel safe about discussing anything, even if they feel this is a
stupid/silly question (no question is stupid).&lt;/p&gt;

&lt;h1 id=&quot;make-sure-your-organization-is-ready&quot;&gt;Make sure your organization is ready&lt;/h1&gt;
&lt;p&gt;If you are going to be be remote, make sure the rest of the organization is
ready. That means there is the necessary infrastructure to work remotely (video
conference system, messenger/chat (Slack or Chime), etc).&lt;/p&gt;

&lt;p&gt;Your organization must be ready for day 1. If people are scheduling meeting and
you cannot join, this is not going to work. If your manager doesn’t use the
video conference system when having a conversation with other teams, you will
not be included in them. Make sure your team/company has the tools and infrastructure
(Skype, teamwork tools, etc.) so that you can communicate with your team/company.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Take Away&lt;/strong&gt;: make sure the company you are working for has the necessary
infrastructure to be part of the team and share information while working
remotely.&lt;/p&gt;

&lt;h1 id=&quot;visit-periodically&quot;&gt;Visit periodically&lt;/h1&gt;
&lt;p&gt;If your team is physically located somewhere (after all, some company have
100% remote workers!), visit periodically. 
Take the opportunity to have face to face discussions with
other teams about new projects. Go for a beer with your colleagues and
socialize. You will probably learn a lot about other projects and people are
sometimes more open to discuss while having a face to face conversation.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Take Away&lt;/strong&gt;: if possible, come back sometimes, have meetings to discuss new
projects (use a whiteboard!). Go for a beer with your team (and offer the first
round).&lt;/p&gt;

&lt;h1 id=&quot;and-to-finish-&quot;&gt;And to finish …&lt;/h1&gt;
&lt;p&gt;This list represents what has been important to me while working remotely.
Every person and company is different and what worked for me might not
be working for you!&lt;/p&gt;
</description>
        <pubDate>Fri, 26 Jan 2018 05:13:20 -0800</pubDate>
        <link>http://julien.gunnm.org/job/remote%20work/2018/01/26/challenge-to-work-remotely/</link>
        <guid isPermaLink="true">http://julien.gunnm.org/job/remote%20work/2018/01/26/challenge-to-work-remotely/</guid>
        
        <category>job</category>
        
        <category>amazon</category>
        
        
        <category>job</category>
        
        <category>remote work</category>
        
      </item>
    
      <item>
        <title>Deploying a Flask Application with Docker on a Raspberry Pi</title>
        <description>&lt;p&gt;I have been very frustrated by actual messaging apps. To me, the best way to communicate is to use &lt;a href=&quot;https://en.wikipedia.org/wiki/Internet_Relay_Chat&quot;&gt;Internet Relay Chat&lt;/a&gt;. It includes all the features I need: multi-channels, private conversation, administration, etc. Unfortunately, for many people, IRC is not user friendly enough or lack many kikoolol(tm) capabilities (such as emojis, which seems to be the ultimate feature for some people).&lt;/p&gt;

&lt;p&gt;I do not want to use over-killed solutions or have many applications that bother and interrupt me all the time. That was a motivation
to implement a very simple message board to exchange messages with friends. The application is very simple: we can have different users, each user can post message. Admins can change password or delete users.&lt;/p&gt;

&lt;p&gt;This is how it looks like.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/flask-chat.png&quot; alt=&quot;Flask Chat&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The application relies on the &lt;a href=&quot;http://flask.pocoo.org/&quot;&gt;Flask framework&lt;/a&gt; and uses a SQLite database to store users/messages information.
If you want to use the application and play locally, check the github application page: &lt;a href=&quot;https://github.com/juli1/flask-chat&quot;&gt;https://github.com/juli1/flask-chat&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This article series explains how to deploy this Flask application on your own server using docker. You can also deploy the same container
in AWS, GCP or Azure. Your choice. I just choose my Raspberry Pi because this is a computer that I have at home, I have full control over it and there is an interesting challenge to host a docker image on such a small computer.&lt;/p&gt;

&lt;p&gt;This article will explain:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;How to checkout and try the application&lt;/li&gt;
  &lt;li&gt;How to build a docker container for it&lt;/li&gt;
  &lt;li&gt;How to run the docker container on your local machine&lt;/li&gt;
  &lt;li&gt;How to run the docker container on a raspberry pi&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;the-application&quot;&gt;The Application&lt;/h1&gt;
&lt;p&gt;I already wrote the application. This is a simple chat, you can check out the code there: &lt;a href=&quot;https://github.com/juli1/flask-chat&quot;&gt;https://github.com/juli1/flask-chat&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can even try it out locally:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone https://github.com/juli1/flask-chat.git
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;flask-chat
&lt;span class=&quot;c&quot;&gt;# Replace the following line with virtualenv if necessary&lt;/span&gt;
python3.X &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; venv venv &lt;span class=&quot;c&quot;&gt;# Replace X with your version of python&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;source &lt;/span&gt;flask/bin/activate
pip &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt; requirements.txt
./run-debug.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then, open your web-browser and go to &lt;a href=&quot;https://localhost:5000&quot;&gt;https://localhost:5000&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I also signed up to have continuous integration with &lt;a href=&quot;https://travis-ci.org/&quot;&gt;travis-ci&lt;/a&gt; and code coverage report from &lt;a href=&quot;https://coveralls.io/&quot;&gt;coveralls&lt;/a&gt;. Just because this is cute to have.&lt;/p&gt;

&lt;h1 id=&quot;building-the-docker-image&quot;&gt;Building the docker image&lt;/h1&gt;

&lt;p&gt;Now, we need to build a docker image to be able to deploy this everywhere.&lt;/p&gt;

&lt;p&gt;The first thing we need is to define a &lt;code class=&quot;highlighter-rouge&quot;&gt;Dockerfile&lt;/code&gt; that defines how to build your container.&lt;/p&gt;

&lt;p&gt;In the following file, we perform the major following steps:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;install all dependencies (&lt;code class=&quot;highlighter-rouge&quot;&gt;python3&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;python3-pip&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;copy our app in &lt;code class=&quot;highlighter-rouge&quot;&gt;/app&lt;/code&gt; in the container&lt;/li&gt;
  &lt;li&gt;install all the python dependencies (specified in &lt;code class=&quot;highlighter-rouge&quot;&gt;requirements.txt&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;create a fresh database &lt;code class=&quot;highlighter-rouge&quot;&gt;db_create.py&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;specify the command to execute the application &lt;code class=&quot;highlighter-rouge&quot;&gt;python3 run-production.py&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;FROM python:3.6-slim-stretch
MAINTAINER Julien Delange &amp;lt;julien@gunnm.org&amp;gt;
RUN apt-get update -y
RUN apt-get install -y python3 python-pip-whl python3-pip
COPY . /app
WORKDIR /app
RUN pip3 install -r requirements.txt
RUN rm -f app.db
RUN python3 ./db_create.py
EXPOSE 5050
ENTRYPOINT [&quot;python3&quot;]
CMD [&quot;run-production.py&quot;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Once we are done, we can build the docker image. To do so, just invoke the following command:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker build -t flask-chat:latest .
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;running-the-docker-image-on-your-local-machine-or-on-your-raspberry-pi&quot;&gt;Running the docker image on your local machine or on your raspberry pi&lt;/h1&gt;

&lt;p&gt;Now, it is time to run the docker image freshly built!&lt;/p&gt;

&lt;p&gt;If you want to run the image you built on your computer into a docker container, just run:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run -d -p 10000:10000 flask-chat
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This command run the container and binds the local port 10000 to the container port 5050 (on which the flask application is listening to).&lt;/p&gt;

&lt;p&gt;If you just want to use the pre-built image from &lt;a href=&quot;https://hub.docker.com/r/juli1/flask-chat/tags/&quot;&gt;dockerhub&lt;/a&gt;
on your local machine, run:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run -d -p 10000:10000 juli1/flask-chat:latest
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And finally, if you want to run the pre-built image from &lt;a href=&quot;https://hub.docker.com/r/juli1/flask-chat/tags/&quot;&gt;dockerhub&lt;/a&gt;
on your raspberry pi, run:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run -d -p 10000:5050 juli1/flask-chat:rpi
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you want to actually build the container on your raspberry pi, you can use the &lt;code class=&quot;highlighter-rouge&quot;&gt;Dockerfile.rpi&lt;/code&gt;`file
in the root directory of the project like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker build -t flask-chat:latest . -f Dockerfile.rpi
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;continuous-integration&quot;&gt;Continuous Integration&lt;/h1&gt;
&lt;p&gt;We are in 2017 (soon 2018) and continuous deployment/integration is just the way to go. Automating
the build of your docker container is very easy - you can just &lt;a href=&quot;http://www.travis-ci.org&quot;&gt;travis-ci&lt;/a&gt; or &lt;a href=&quot;http://docker.com&quot;&gt;docker&lt;/a&gt;
do trigger every time there is a commit.&lt;/p&gt;

&lt;p&gt;What is more difficult is to build the image for raspberry pi. This &lt;a href=&quot;https://blog.hypriot.com/post/setup-simple-ci-pipeline-for-arm-images/&quot;&gt;tutorial&lt;/a&gt;
helped a lot. If you want to build your own docker image for raspberry pi, have a look at my 
&lt;a href=&quot;https://github.com/juli1/flask-chat/blob/master/Dockerfile.rpi&quot;&gt;the Dockerfile.rpi&lt;/a&gt; in the project github directory.&lt;/p&gt;

&lt;h1 id=&quot;useful-resources&quot;&gt;Useful resources&lt;/h1&gt;
&lt;p&gt;The chat application is available on my github account: &lt;a href=&quot;https://github.com/juli1/flask-chat&quot;&gt;https://github.com/juli1/flask-chat&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The docker images are on this repository: &lt;a href=&quot;https://hub.docker.com/r/juli1/flask-chat/&quot;&gt;https://hub.docker.com/r/juli1/flask-chat/&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The docker image for intel is: juli1/flask-chat:latest&lt;/li&gt;
  &lt;li&gt;The docker image for raspberry pi is: juli1/flask-chat:rpi&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These are some resources I used during my search for information on rust.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://flask.pocoo.org/&quot;&gt;The Flask Website&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-i-hello-world&quot;&gt;The Amazing Flask Tutorial&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.docker.com/engine/reference/builder/&quot;&gt;Dockerfile reference&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://containertutorials.com/docker-compose/flask-simple-app.html&quot;&gt;Docker container for Flask&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 03 Dec 2017 05:13:20 -0800</pubDate>
        <link>http://julien.gunnm.org/flask/python/docker/raspberry-pi/2017/12/03/developing-deploying-with-docker-on-raspberry-pi/</link>
        <guid isPermaLink="true">http://julien.gunnm.org/flask/python/docker/raspberry-pi/2017/12/03/developing-deploying-with-docker-on-raspberry-pi/</guid>
        
        <category>flask</category>
        
        <category>docker</category>
        
        <category>gcp</category>
        
        <category>azure</category>
        
        <category>aws</category>
        
        
        <category>flask</category>
        
        <category>python</category>
        
        <category>docker</category>
        
        <category>raspberry-pi</category>
        
      </item>
    
      <item>
        <title>Learning rust, implementing a webserver</title>
        <description>&lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;/h1&gt;
&lt;p&gt;I wanted to learn &lt;a href=&quot;https://www.rust-lang.org&quot;&gt;rust&lt;/a&gt; months ago. I remember
attending a talk in Pittsburgh several years ago about rust and I liked the idea
that instead of re-implementing the wheel, it tries to solve issues other new
languages never try to fix (or did it in an efficient/ineffective way).&lt;/p&gt;

&lt;p&gt;I spent some time over the last two weeks to learn the langage and complete a
project in rust: a webserver. Nothing really fancy, it was rather a way to learn
the language. I believe the best way to learn a new language is to complete few
new projects.&lt;/p&gt;

&lt;p&gt;This is the result: I am able to run a webserver that can host this blog, as
shown in the picture below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/rust-webserver-browser.png&quot; alt=&quot;Blog running on rust webserver&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And this is basically how to launch it:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/rust-webserver-term.png&quot; alt=&quot;Terminal with Cargo&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In this article, I will talk about this project and share some thoughts about
rust.&lt;/p&gt;

&lt;h1 id=&quot;a-web-server-in-rust&quot;&gt;A web server in rust&lt;/h1&gt;

&lt;h2 id=&quot;specifications&quot;&gt;Specifications&lt;/h2&gt;
&lt;p&gt;I wanted to implement a simple webserver in rust to understand/practice/use the
language. The goal was to be able to have a server able to show a static
website. This is an experiment and this should absolutely &lt;strong&gt;not be used in
production&lt;/strong&gt;. This project is useful if you are new to rust and/or want a
codebase about networking features in rust (such as using the
&lt;a href=&quot;https://docs.rs/mio&quot;&gt;mio&lt;/a&gt; or &lt;a href=&quot;https://doc.rust-lang.org/getopts&quot;&gt;getops&lt;/a&gt;
crates).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Non goals&lt;/strong&gt;: full http support, large file handling, security (you can access
the full FS ).&lt;/p&gt;

&lt;h2 id=&quot;get-the-code-and-run-it&quot;&gt;Get the code and run it&lt;/h2&gt;
&lt;p&gt;The code is publicly available on github at:
&lt;a href=&quot;https://github.com/juli1/rust-webserver&quot;&gt;https://github.com/juli1/rust-webserver&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# git clone https://github.com/juli1/rust-webserver.git
# cd rust-webserver
# cargo build &amp;amp;&amp;amp; cargo run -- -p 9065 -l 127.0.0.1 --rootdir `pwd`
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then, open your browser and go to
&lt;a href=&quot;http://localhost:9065/Cargo.toml&quot;&gt;http://localhost:9065/Cargo.toml&lt;/a&gt;. You will
be able to see the file from the source directory.&lt;/p&gt;

&lt;h2 id=&quot;details-of-the-code&quot;&gt;Details of the code&lt;/h2&gt;

&lt;p&gt;The code is separated into four files:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;server.rs&lt;/code&gt; is about all the server part to listen on the socket,
communication handling and so on.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;client.rs&lt;/code&gt; is about handling request/reply for a particular connection.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;protocol.rs&lt;/code&gt; contains all the code with all the data structure related to the
requests and replies.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;main.rs&lt;/code&gt; checks the options passed to the command line, create a server and
… nothing else!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The code does not handles all HTTP headers. The server supports HTTP/1.0 only.
The parsing of command is very basic. The server supports basically two file
types: html, png and jpg. Yes, this is very basic but met my goal: it was an
awesome way to learn rust and I loved it!&lt;/p&gt;

&lt;h1 id=&quot;feedback-about-rust&quot;&gt;Feedback about rust&lt;/h1&gt;

&lt;p&gt;I really like rust. At first, the language brings a lot of frustration because of all the
restrictions and scope, borrow, etc. You really need to undertand these concepts
to make any progress. Once you pass the first hours digging online about the
errorr messages (that are pretty clear by the way), you realize how the language
help you to bring more assurance that your code is safe and free of errors. It
reminds me several aspects of
&lt;a href=&quot;https://en.wikipedia.org/wiki/Ada_(programming_language)&quot;&gt;Ada&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Rust is what we should be expecting for the next generation of language to do
low-level/system programming (program like webservers, file servers, etc.). It will probably not be
the language I will use if I design a web application. On the other hand, this
will probably be my choice if I need to do a web-server, file server or any
program and needs to be safe, reliable and performant.&lt;/p&gt;

&lt;h2 id=&quot;rust-pros&quot;&gt;Rust: pros&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Compiler error messages&lt;/strong&gt;: Debug messages are clean and useful. We are very far from C++ compilers that
produces a tons of useless error messages that hide the cause of the issue. When
starting in Rust, you will have a tons of compilation errors but error messages
will be easy to understand to fix your program and make progress.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Speed&lt;/strong&gt;: programs written in Rust seems fast. I did not benchmark but this
seems very promising.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Predictability&lt;/strong&gt;: rust reminds me Ada: it is painful to write your first
program because of all the language restrictions. However, once it compiles, it
generally works as expected. I had very few crashes during the development of
the webserver but I had a ton of error messages before it even starts working.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Ownership&lt;/strong&gt; : the concept behind ownership is painful at first but after a
while, it is easy to understand how powerful it can be.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;rust-cons&quot;&gt;Rust: cons&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Lifetime&lt;/strong&gt;: the idea behind &lt;a href=&quot;https://rustbyexample.com/scope/lifetime.html&quot;&gt;lifetime&lt;/a&gt;
is really powerful and useful. The language &lt;em&gt;needs&lt;/em&gt; have a way to annotate the
lifetime of objects/variables but the syntax is horrible and the whole mechanism
is ultra verbose.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;useful-resources&quot;&gt;Useful resources&lt;/h1&gt;
&lt;p&gt;These are some resources I used during my search for information on rust.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://rustbyexample.com/&quot;&gt;Rust By Example&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.burntsushi.net/rust-error-handling/&quot;&gt;Error Handing in rust&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.jmarshall.com/easy/http/&quot;&gt;HTTP made very easy&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sat, 18 Nov 2017 05:13:20 -0800</pubDate>
        <link>http://julien.gunnm.org/rust/2017/11/18/learning-rust-in-practice-webserver-in-rust/</link>
        <guid isPermaLink="true">http://julien.gunnm.org/rust/2017/11/18/learning-rust-in-practice-webserver-in-rust/</guid>
        
        <category>rust</category>
        
        <category>webserver</category>
        
        
        <category>rust</category>
        
      </item>
    
  </channel>
</rss>
